# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from reactome_analysis_api.models.base_model_ import Model
from reactome_analysis_api import util


class AnalysisResultResults(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, pathways: str=None, fold_changes: str=None):  # noqa: E501
        """AnalysisResultResults - a model defined in Swagger

        :param name: The name of this AnalysisResultResults.  # noqa: E501
        :type name: str
        :param pathways: The pathways of this AnalysisResultResults.  # noqa: E501
        :type pathways: str
        :param fold_changes: The fold_changes of this AnalysisResultResults.  # noqa: E501
        :type fold_changes: str
        """
        self.swagger_types = {
            'name': str,
            'pathways': str,
            'fold_changes': str
        }

        self.attribute_map = {
            'name': 'name',
            'pathways': 'pathways',
            'fold_changes': 'fold_changes'
        }

        self._name = name
        self._pathways = pathways
        self._fold_changes = fold_changes

    @classmethod
    def from_dict(cls, dikt) -> 'AnalysisResultResults':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AnalysisResult_results of this AnalysisResultResults.  # noqa: E501
        :rtype: AnalysisResultResults
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this AnalysisResultResults.

        Name of the dataset the result refers to. May also contain another identifier if a meta-analysis combining the data from various datasets is performed.  # noqa: E501

        :return: The name of this AnalysisResultResults.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this AnalysisResultResults.

        Name of the dataset the result refers to. May also contain another identifier if a meta-analysis combining the data from various datasets is performed.  # noqa: E501

        :param name: The name of this AnalysisResultResults.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def pathways(self) -> str:
        """Gets the pathways of this AnalysisResultResults.

        The pathway-centric result matrix as a tab-delimted matrix with the pathways as rows. Required columns are 'Pathway', 'Direction' indicating 'up' or 'down', 'FDR' for the corrected p-values, and 'PValue' for the uncorrected p-value. Tab is escaped using \\t and new-lines are escaped using \\n  # noqa: E501

        :return: The pathways of this AnalysisResultResults.
        :rtype: str
        """
        return self._pathways

    @pathways.setter
    def pathways(self, pathways: str):
        """Sets the pathways of this AnalysisResultResults.

        The pathway-centric result matrix as a tab-delimted matrix with the pathways as rows. Required columns are 'Pathway', 'Direction' indicating 'up' or 'down', 'FDR' for the corrected p-values, and 'PValue' for the uncorrected p-value. Tab is escaped using \\t and new-lines are escaped using \\n  # noqa: E501

        :param pathways: The pathways of this AnalysisResultResults.
        :type pathways: str
        """
        if pathways is None:
            raise ValueError("Invalid value for `pathways`, must not be `None`")  # noqa: E501

        self._pathways = pathways

    @property
    def fold_changes(self) -> str:
        """Gets the fold_changes of this AnalysisResultResults.

        Some analysis may report gene / protein centric fold changes. These are reported as a tab-delimited matrix with the genes / proteins as rows.  # noqa: E501

        :return: The fold_changes of this AnalysisResultResults.
        :rtype: str
        """
        return self._fold_changes

    @fold_changes.setter
    def fold_changes(self, fold_changes: str):
        """Sets the fold_changes of this AnalysisResultResults.

        Some analysis may report gene / protein centric fold changes. These are reported as a tab-delimited matrix with the genes / proteins as rows.  # noqa: E501

        :param fold_changes: The fold_changes of this AnalysisResultResults.
        :type fold_changes: str
        """

        self._fold_changes = fold_changes
