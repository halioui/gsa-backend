# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from reactome_analysis_api.models.base_model_ import Model
from reactome_analysis_api import util


class ExternalDatasourceParameters(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, display_name: str=None, type: str=None, description: str=None, required: bool=None):  # noqa: E501
        """ExternalDatasourceParameters - a model defined in Swagger

        :param name: The name of this ExternalDatasourceParameters.  # noqa: E501
        :type name: str
        :param display_name: The display_name of this ExternalDatasourceParameters.  # noqa: E501
        :type display_name: str
        :param type: The type of this ExternalDatasourceParameters.  # noqa: E501
        :type type: str
        :param description: The description of this ExternalDatasourceParameters.  # noqa: E501
        :type description: str
        :param required: The required of this ExternalDatasourceParameters.  # noqa: E501
        :type required: bool
        """
        self.swagger_types = {
            'name': str,
            'display_name': str,
            'type': str,
            'description': str,
            'required': bool
        }

        self.attribute_map = {
            'name': 'name',
            'display_name': 'display_name',
            'type': 'type',
            'description': 'description',
            'required': 'required'
        }

        self._name = name
        self._display_name = display_name
        self._type = type
        self._description = description
        self._required = required

    @classmethod
    def from_dict(cls, dikt) -> 'ExternalDatasourceParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ExternalDatasource_parameters of this ExternalDatasourceParameters.  # noqa: E501
        :rtype: ExternalDatasourceParameters
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this ExternalDatasourceParameters.

        Parameter name  # noqa: E501

        :return: The name of this ExternalDatasourceParameters.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this ExternalDatasourceParameters.

        Parameter name  # noqa: E501

        :param name: The name of this ExternalDatasourceParameters.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def display_name(self) -> str:
        """Gets the display_name of this ExternalDatasourceParameters.

        A user-friendly display name for the parameter.  # noqa: E501

        :return: The display_name of this ExternalDatasourceParameters.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name: str):
        """Sets the display_name of this ExternalDatasourceParameters.

        A user-friendly display name for the parameter.  # noqa: E501

        :param display_name: The display_name of this ExternalDatasourceParameters.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def type(self) -> str:
        """Gets the type of this ExternalDatasourceParameters.


        :return: The type of this ExternalDatasourceParameters.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this ExternalDatasourceParameters.


        :param type: The type of this ExternalDatasourceParameters.
        :type type: str
        """
        allowed_values = ["int", "string", "float"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def description(self) -> str:
        """Gets the description of this ExternalDatasourceParameters.


        :return: The description of this ExternalDatasourceParameters.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this ExternalDatasourceParameters.


        :param description: The description of this ExternalDatasourceParameters.
        :type description: str
        """

        self._description = description

    @property
    def required(self) -> bool:
        """Gets the required of this ExternalDatasourceParameters.

        Indicates whether the parameter has to be supplied.  # noqa: E501

        :return: The required of this ExternalDatasourceParameters.
        :rtype: bool
        """
        return self._required

    @required.setter
    def required(self, required: bool):
        """Sets the required of this ExternalDatasourceParameters.

        Indicates whether the parameter has to be supplied.  # noqa: E501

        :param required: The required of this ExternalDatasourceParameters.
        :type required: bool
        """
        if required is None:
            raise ValueError("Invalid value for `required`, must not be `None`")  # noqa: E501

        self._required = required
