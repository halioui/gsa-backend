# coding: utf-8

from __future__ import absolute_import

from typing import List  # noqa: F401

from reactome_analysis_api import util
from reactome_analysis_api.models.base_model_ import Model


class MethodParameters(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, display_name: str=None, type: str=None, scope: str=None, default: str=None, values: List[str]=None, description: str=None):  # noqa: E501
        """MethodParameters - a model defined in Swagger

        :param name: The name of this MethodParameters.  # noqa: E501
        :type name: str
        :param display_name: The display_name of this MethodParameters.  # noqa: E501
        :type display_name: str
        :param type: The type of this MethodParameters.  # noqa: E501
        :type type: str
        :param scope: The scope of this MethodParameters.  # noqa: E501
        :type scope: str
        :param default: The default of this MethodParameters.  # noqa: E501
        :type default: str
        :param values: The values of this MethodParameters.  # noqa: E501
        :type values: List[str]
        :param description: The description of this MethodParameters.  # noqa: E501
        :type description: str
        """
        self.swagger_types = {
            'name': str,
            'display_name': str,
            'type': str,
            'scope': str,
            'default': str,
            'values': List[str],
            'description': str
        }

        self.attribute_map = {
            'name': 'name',
            'display_name': 'display_name',
            'type': 'type',
            'scope': 'scope',
            'default': 'default',
            'values': 'values',
            'description': 'description'
        }

        self._name = name
        self._display_name = display_name
        self._type = type
        self._scope = scope
        self._default = default
        self._values = values
        self._description = description

    @classmethod
    def from_dict(cls, dikt) -> 'MethodParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Method_parameters of this MethodParameters.  # noqa: E501
        :rtype: MethodParameters
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this MethodParameters.


        :return: The name of this MethodParameters.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this MethodParameters.


        :param name: The name of this MethodParameters.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def display_name(self) -> str:
        """Gets the display_name of this MethodParameters.

        Nicely formatted name  # noqa: E501

        :return: The display_name of this MethodParameters.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name: str):
        """Sets the display_name of this MethodParameters.

        Nicely formatted name  # noqa: E501

        :param display_name: The display_name of this MethodParameters.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def type(self) -> str:
        """Gets the type of this MethodParameters.


        :return: The type of this MethodParameters.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this MethodParameters.


        :param type: The type of this MethodParameters.
        :type type: str
        """
        allowed_values = ["int", "string", "float"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def scope(self) -> str:
        """Gets the scope of this MethodParameters.

        Defines at what level a parameter can be specified. \"analysis\" level parameters must only be specified as part of the general 'parameters' object. \"dataset\" level parameters may either be specified at the dataset or at the analysis level. At the analysis level, this value is used as default for all datasets. In case the same parameter is also specified on the / a dataset level, this value overwrites the analysis' method's parameter for the given dataset. Finally, \"common\" parameters must also only be defined on the analysis level but influence the general behaviour of the system (for example, whether an e-mail notification is sent) that do not influence the actual result.  # noqa: E501

        :return: The scope of this MethodParameters.
        :rtype: str
        """
        return self._scope

    @scope.setter
    def scope(self, scope: str):
        """Sets the scope of this MethodParameters.

        Defines at what level a parameter can be specified. \"analysis\" level parameters must only be specified as part of the general 'parameters' object. \"dataset\" level parameters may either be specified at the dataset or at the analysis level. At the analysis level, this value is used as default for all datasets. In case the same parameter is also specified on the / a dataset level, this value overwrites the analysis' method's parameter for the given dataset. Finally, \"common\" parameters must also only be defined on the analysis level but influence the general behaviour of the system (for example, whether an e-mail notification is sent) that do not influence the actual result.  # noqa: E501

        :param scope: The scope of this MethodParameters.
        :type scope: str
        """
        allowed_values = ["analysis", "dataset", "common"]  # noqa: E501
        if scope not in allowed_values:
            raise ValueError(
                "Invalid value for `scope` ({0}), must be one of {1}"
                .format(scope, allowed_values)
            )

        self._scope = scope

    @property
    def default(self) -> str:
        """Gets the default of this MethodParameters.

        The default value of the specified parameter.  # noqa: E501

        :return: The default of this MethodParameters.
        :rtype: str
        """
        return self._default

    @default.setter
    def default(self, default: str):
        """Sets the default of this MethodParameters.

        The default value of the specified parameter.  # noqa: E501

        :param default: The default of this MethodParameters.
        :type default: str
        """

        self._default = default

    @property
    def values(self) -> List[str]:
        """Gets the values of this MethodParameters.

        Limits the allowed values to the following list  # noqa: E501

        :return: The values of this MethodParameters.
        :rtype: List[str]
        """
        return self._values

    @values.setter
    def values(self, values: List[str]):
        """Sets the values of this MethodParameters.

        Limits the allowed values to the following list  # noqa: E501

        :param values: The values of this MethodParameters.
        :type values: List[str]
        """

        self._values = values

    @property
    def description(self) -> str:
        """Gets the description of this MethodParameters.


        :return: The description of this MethodParameters.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this MethodParameters.


        :param description: The description of this MethodParameters.
        :type description: str
        """

        self._description = description
