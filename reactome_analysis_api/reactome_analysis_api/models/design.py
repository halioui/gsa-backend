# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from reactome_analysis_api.models.base_model_ import Model
from reactome_analysis_api.models.design_comparison import DesignComparison  # noqa: F401,E501
from reactome_analysis_api import util


class Design(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, samples: List[str]=None, comparison: DesignComparison=None, analysis_group: List[str]=None):  # noqa: E501
        """Design - a model defined in Swagger

        :param samples: The samples of this Design.  # noqa: E501
        :type samples: List[str]
        :param comparison: The comparison of this Design.  # noqa: E501
        :type comparison: DesignComparison
        :param analysis_group: The analysis_group of this Design.  # noqa: E501
        :type analysis_group: List[str]
        """
        self.swagger_types = {
            'samples': List[str],
            'comparison': DesignComparison,
            'analysis_group': List[str]
        }

        self.attribute_map = {
            'samples': 'samples',
            'comparison': 'comparison',
            'analysis_group': 'analysisGroup'
        }

        self._samples = samples
        self._comparison = comparison
        self._analysis_group = analysis_group

    @classmethod
    def from_dict(cls, dikt) -> 'Design':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Design of this Design.  # noqa: E501
        :rtype: Design
        """
        return util.deserialize_model(dikt, cls)

    @property
    def samples(self) -> List[str]:
        """Gets the samples of this Design.

        List of all samples in the dataset. This will overwrite the sample names (= column names) in the expression matrix. Therefore, the number of entries in the array must match the number of samples in the expression matrix.  # noqa: E501

        :return: The samples of this Design.
        :rtype: List[str]
        """
        return self._samples

    @samples.setter
    def samples(self, samples: List[str]):
        """Sets the samples of this Design.

        List of all samples in the dataset. This will overwrite the sample names (= column names) in the expression matrix. Therefore, the number of entries in the array must match the number of samples in the expression matrix.  # noqa: E501

        :param samples: The samples of this Design.
        :type samples: List[str]
        """
        if samples is None:
            raise ValueError("Invalid value for `samples`, must not be `None`")  # noqa: E501

        self._samples = samples

    @property
    def comparison(self) -> DesignComparison:
        """Gets the comparison of this Design.


        :return: The comparison of this Design.
        :rtype: DesignComparison
        """
        return self._comparison

    @comparison.setter
    def comparison(self, comparison: DesignComparison):
        """Sets the comparison of this Design.


        :param comparison: The comparison of this Design.
        :type comparison: DesignComparison
        """
        if comparison is None:
            raise ValueError("Invalid value for `comparison`, must not be `None`")  # noqa: E501

        self._comparison = comparison

    @property
    def analysis_group(self) -> List[str]:
        """Gets the analysis_group of this Design.

        Names the group to use for the main analysis  # noqa: E501

        :return: The analysis_group of this Design.
        :rtype: List[str]
        """
        return self._analysis_group

    @analysis_group.setter
    def analysis_group(self, analysis_group: List[str]):
        """Sets the analysis_group of this Design.

        Names the group to use for the main analysis  # noqa: E501

        :param analysis_group: The analysis_group of this Design.
        :type analysis_group: List[str]
        """
        if analysis_group is None:
            raise ValueError("Invalid value for `analysis_group`, must not be `None`")  # noqa: E501

        self._analysis_group = analysis_group
