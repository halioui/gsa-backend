# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from reactome_analysis_api.models.base_model_ import Model
from reactome_analysis_api import util


class DatasetLoadingStatus(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, status: str=None, description: str=None, completed: float=None, dataset_id: str=None):  # noqa: E501
        """DatasetLoadingStatus - a model defined in Swagger

        :param id: The id of this DatasetLoadingStatus.  # noqa: E501
        :type id: str
        :param status: The status of this DatasetLoadingStatus.  # noqa: E501
        :type status: str
        :param description: The description of this DatasetLoadingStatus.  # noqa: E501
        :type description: str
        :param completed: The completed of this DatasetLoadingStatus.  # noqa: E501
        :type completed: float
        :param dataset_id: The dataset_id of this DatasetLoadingStatus.  # noqa: E501
        :type dataset_id: str
        """
        self.swagger_types = {
            'id': str,
            'status': str,
            'description': str,
            'completed': float,
            'dataset_id': str
        }

        self.attribute_map = {
            'id': 'id',
            'status': 'status',
            'description': 'description',
            'completed': 'completed',
            'dataset_id': 'dataset_id'
        }

        self._id = id
        self._status = status
        self._description = description
        self._completed = completed
        self._dataset_id = dataset_id

    @classmethod
    def from_dict(cls, dikt) -> 'DatasetLoadingStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DatasetLoadingStatus of this DatasetLoadingStatus.  # noqa: E501
        :rtype: DatasetLoadingStatus
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this DatasetLoadingStatus.

        The identifier of the running task  # noqa: E501

        :return: The id of this DatasetLoadingStatus.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this DatasetLoadingStatus.

        The identifier of the running task  # noqa: E501

        :param id: The id of this DatasetLoadingStatus.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def status(self) -> str:
        """Gets the status of this DatasetLoadingStatus.

        Current status of the analysis  # noqa: E501

        :return: The status of this DatasetLoadingStatus.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this DatasetLoadingStatus.

        Current status of the analysis  # noqa: E501

        :param status: The status of this DatasetLoadingStatus.
        :type status: str
        """
        allowed_values = ["running", "complete", "failed"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def description(self) -> str:
        """Gets the description of this DatasetLoadingStatus.

        Some methods may return a more verbose status of the process.  # noqa: E501

        :return: The description of this DatasetLoadingStatus.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this DatasetLoadingStatus.

        Some methods may return a more verbose status of the process.  # noqa: E501

        :param description: The description of this DatasetLoadingStatus.
        :type description: str
        """

        self._description = description

    @property
    def completed(self) -> float:
        """Gets the completed of this DatasetLoadingStatus.

        Current progress of the task.  # noqa: E501

        :return: The completed of this DatasetLoadingStatus.
        :rtype: float
        """
        return self._completed

    @completed.setter
    def completed(self, completed: float):
        """Sets the completed of this DatasetLoadingStatus.

        Current progress of the task.  # noqa: E501

        :param completed: The completed of this DatasetLoadingStatus.
        :type completed: float
        """
        if completed is not None and completed > 1:  # noqa: E501
            raise ValueError("Invalid value for `completed`, must be a value less than or equal to `1`")  # noqa: E501
        if completed is not None and completed < 0:  # noqa: E501
            raise ValueError("Invalid value for `completed`, must be a value greater than or equal to `0`")  # noqa: E501

        self._completed = completed

    @property
    def dataset_id(self) -> str:
        """Gets the dataset_id of this DatasetLoadingStatus.

        If the loading process is complete, this field contains the identifier of the loaded dataset. This identifier can then be used to retrieve the loading summary and to refer to the loaded data in the analysis request.  # noqa: E501

        :return: The dataset_id of this DatasetLoadingStatus.
        :rtype: str
        """
        return self._dataset_id

    @dataset_id.setter
    def dataset_id(self, dataset_id: str):
        """Sets the dataset_id of this DatasetLoadingStatus.

        If the loading process is complete, this field contains the identifier of the loaded dataset. This identifier can then be used to retrieve the loading summary and to refer to the loaded data in the analysis request.  # noqa: E501

        :param dataset_id: The dataset_id of this DatasetLoadingStatus.
        :type dataset_id: str
        """

        self._dataset_id = dataset_id
