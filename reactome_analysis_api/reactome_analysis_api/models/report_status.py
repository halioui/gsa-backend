# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from reactome_analysis_api.models.base_model_ import Model
from reactome_analysis_api.models.report_status_reports import ReportStatusReports  # noqa: F401,E501
from reactome_analysis_api import util


class ReportStatus(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, status: str=None, description: str=None, completed: float=None, reports: List[ReportStatusReports]=None):  # noqa: E501
        """ReportStatus - a model defined in Swagger

        :param id: The id of this ReportStatus.  # noqa: E501
        :type id: str
        :param status: The status of this ReportStatus.  # noqa: E501
        :type status: str
        :param description: The description of this ReportStatus.  # noqa: E501
        :type description: str
        :param completed: The completed of this ReportStatus.  # noqa: E501
        :type completed: float
        :param reports: The reports of this ReportStatus.  # noqa: E501
        :type reports: List[ReportStatusReports]
        """
        self.swagger_types = {
            'id': str,
            'status': str,
            'description': str,
            'completed': float,
            'reports': List[ReportStatusReports]
        }

        self.attribute_map = {
            'id': 'id',
            'status': 'status',
            'description': 'description',
            'completed': 'completed',
            'reports': 'reports'
        }

        self._id = id
        self._status = status
        self._description = description
        self._completed = completed
        self._reports = reports

    @classmethod
    def from_dict(cls, dikt) -> 'ReportStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ReportStatus of this ReportStatus.  # noqa: E501
        :rtype: ReportStatus
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this ReportStatus.

        The identifier of the running task  # noqa: E501

        :return: The id of this ReportStatus.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this ReportStatus.

        The identifier of the running task  # noqa: E501

        :param id: The id of this ReportStatus.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def status(self) -> str:
        """Gets the status of this ReportStatus.

        Current status of the report generation  # noqa: E501

        :return: The status of this ReportStatus.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this ReportStatus.

        Current status of the report generation  # noqa: E501

        :param status: The status of this ReportStatus.
        :type status: str
        """
        allowed_values = ["running", "complete", "failed"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def description(self) -> str:
        """Gets the description of this ReportStatus.

        Some methods may return a more verbose status of the process.  # noqa: E501

        :return: The description of this ReportStatus.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this ReportStatus.

        Some methods may return a more verbose status of the process.  # noqa: E501

        :param description: The description of this ReportStatus.
        :type description: str
        """

        self._description = description

    @property
    def completed(self) -> float:
        """Gets the completed of this ReportStatus.

        Current progress of the report generation.  # noqa: E501

        :return: The completed of this ReportStatus.
        :rtype: float
        """
        return self._completed

    @completed.setter
    def completed(self, completed: float):
        """Sets the completed of this ReportStatus.

        Current progress of the report generation.  # noqa: E501

        :param completed: The completed of this ReportStatus.
        :type completed: float
        """
        if completed is not None and completed > 1:  # noqa: E501
            raise ValueError("Invalid value for `completed`, must be a value less than or equal to `1`")  # noqa: E501
        if completed is not None and completed < 0:  # noqa: E501
            raise ValueError("Invalid value for `completed`, must be a value greater than or equal to `0`")  # noqa: E501

        self._completed = completed

    @property
    def reports(self) -> List[ReportStatusReports]:
        """Gets the reports of this ReportStatus.

        If the report generation was completed, this array contains the list of all generated reports.  # noqa: E501

        :return: The reports of this ReportStatus.
        :rtype: List[ReportStatusReports]
        """
        return self._reports

    @reports.setter
    def reports(self, reports: List[ReportStatusReports]):
        """Sets the reports of this ReportStatus.

        If the report generation was completed, this array contains the list of all generated reports.  # noqa: E501

        :param reports: The reports of this ReportStatus.
        :type reports: List[ReportStatusReports]
        """

        self._reports = reports
