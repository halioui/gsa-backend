# coding: utf-8

from __future__ import absolute_import

from reactome_analysis_api import util
from reactome_analysis_api.models.base_model_ import Model


class ReportStatusReports(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, url: str=None, mimetype: str=None):  # noqa: E501
        """ReportStatusReports - a model defined in Swagger

        :param name: The name of this ReportStatusReports.  # noqa: E501
        :type name: str
        :param url: The url of this ReportStatusReports.  # noqa: E501
        :type url: str
        :param mimetype: The mimetype of this ReportStatusReports.  # noqa: E501
        :type mimetype: str
        """
        self.swagger_types = {
            'name': str,
            'url': str,
            'mimetype': str
        }

        self.attribute_map = {
            'name': 'name',
            'url': 'url',
            'mimetype': 'mimetype'
        }

        self._name = name
        self._url = url
        self._mimetype = mimetype

    @classmethod
    def from_dict(cls, dikt) -> 'ReportStatusReports':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ReportStatus_reports of this ReportStatusReports.  # noqa: E501
        :rtype: ReportStatusReports
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this ReportStatusReports.

        Name of the created report  # noqa: E501

        :return: The name of this ReportStatusReports.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this ReportStatusReports.

        Name of the created report  # noqa: E501

        :param name: The name of this ReportStatusReports.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def url(self) -> str:
        """Gets the url of this ReportStatusReports.

        URL of the report  # noqa: E501

        :return: The url of this ReportStatusReports.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url: str):
        """Sets the url of this ReportStatusReports.

        URL of the report  # noqa: E501

        :param url: The url of this ReportStatusReports.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")  # noqa: E501

        self._url = url

    @property
    def mimetype(self) -> str:
        """Gets the mimetype of this ReportStatusReports.

        For some reports a mimetype may be provided  # noqa: E501

        :return: The mimetype of this ReportStatusReports.
        :rtype: str
        """
        return self._mimetype

    @mimetype.setter
    def mimetype(self, mimetype: str):
        """Sets the mimetype of this ReportStatusReports.

        For some reports a mimetype may be provided  # noqa: E501

        :param mimetype: The mimetype of this ReportStatusReports.
        :type mimetype: str
        """

        self._mimetype = mimetype
